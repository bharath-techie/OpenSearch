/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 *
 * Modifications Copyright OpenSearch Contributors. See
 * GitHub history for details.
 */

apply plugin: 'opensearch.publish'

opensearchplugin {
  description 'Arrow flight based Stream implementation'
  classname 'org.opensearch.arrow.flight.FlightStreamPlugin'
}

dependencies {
  implementation project(':libs:opensearch-arrow-spi')
  implementation project(':modules:transport-netty4')

  implementation 'org.checkerframework:checker-qual:3.44.0'
  implementation "org.apache.arrow:arrow-memory-core:${versions.arrow}"
  implementation "org.apache.arrow:arrow-memory-netty-buffer-patch:${versions.arrow}"
  implementation "org.apache.arrow:arrow-memory-netty:${versions.arrow}"

  runtimeOnly group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
  compileOnly 'org.immutables:value:2.9.3'
  annotationProcessor 'org.immutables:value:2.9.3'
  implementation 'org.checkerframework:checker-qual:3.44.0'
  implementation 'org.apache.arrow:arrow-flight:17.0.0'
  implementation 'org.apache.arrow:flight-core:17.0.0'
  implementation 'io.grpc:grpc-api:1.63.0'
  implementation 'io.grpc:grpc-netty:1.63.0'
  runtimeOnly 'io.grpc:grpc-core:1.63.0'
  implementation 'io.grpc:grpc-stub:1.63.0'
  runtimeOnly 'io.grpc:grpc-all:1.63.0'
  runtimeOnly 'io.grpc:grpc-protobuf:1.63.0'
  runtimeOnly 'io.grpc:grpc-protobuf-lite:1.63.0'
  runtimeOnly 'io.perfmark:perfmark-api:0.27.0'
  runtimeOnly "com.google.guava:failureaccess:1.0.1"
  compileOnly "com.google.errorprone:error_prone_annotations:2.18.0"
  runtimeOnly('com.google.guava:guava:33.2.1-jre') {
    attributes {
      attribute(Attribute.of('org.gradle.jvm.environment', String), 'standard-jvm')
    }
  }
  runtimeOnly 'org.apache.parquet:parquet-arrow:1.13.1'
}

tasks.named('forbiddenApisMain').configure {
  replaceSignatureFiles 'jdk-signatures'

  excludes = [
    'org/apache/arrow/flight/OpenSearchFlightServer$Builder.class',
    'org/opensearch/flight/bootstrap/server/ServerConfig$Netty4Configs.class',
    'org/opensearch/flight/bootstrap/server/ServerConfig.class',
    'org/opensearch/flight/bootstrap/tls/DefaultSslContextProvider.class',
    'org/apache/arrow/flight/OpenSearchFlightClient$Builder.class'
  ]
}

tasks.named('thirdPartyAudit').configure {
  ignoreMissingClasses(

  )
}

tasks.named('thirdPartyAudit').configure {
  ignoreMissingClasses(
    'com.google.gson.stream.JsonReader',
    'com.google.gson.stream.JsonToken',
    'com.google.protobuf.util.Timestamps',
    'com.google.rpc.Status',
    'com.google.rpc.Status$Builder',
    'org.apache.parquet.schema.GroupType',
    // Parquet Schema classes
    'org.apache.parquet.schema.LogicalTypeAnnotation',
    'org.apache.parquet.schema.LogicalTypeAnnotation$DateLogicalTypeAnnotation',
    'org.apache.parquet.schema.LogicalTypeAnnotation$DecimalLogicalTypeAnnotation',
    'org.apache.parquet.schema.LogicalTypeAnnotation$IntLogicalTypeAnnotation',
    'org.apache.parquet.schema.LogicalTypeAnnotation$IntervalLogicalTypeAnnotation',
    'org.apache.parquet.schema.LogicalTypeAnnotation$ListLogicalTypeAnnotation',
    'org.apache.parquet.schema.LogicalTypeAnnotation$LogicalTypeAnnotationVisitor',
    'org.apache.parquet.schema.LogicalTypeAnnotation$StringLogicalTypeAnnotation',
    'org.apache.parquet.schema.LogicalTypeAnnotation$TimeLogicalTypeAnnotation',
    'org.apache.parquet.schema.LogicalTypeAnnotation$TimeUnit',
    'org.apache.parquet.schema.LogicalTypeAnnotation$TimestampLogicalTypeAnnotation',
    'org.apache.parquet.schema.MessageType',
    'org.apache.parquet.schema.OriginalType',
    'org.apache.parquet.schema.PrimitiveType',
    'org.apache.parquet.schema.PrimitiveType$PrimitiveTypeName',
    'org.apache.parquet.schema.PrimitiveType$PrimitiveTypeNameConverter',
    'org.apache.parquet.schema.Type',
    'org.apache.parquet.schema.Type$Repetition',
    'org.apache.parquet.schema.Types',
    'org.apache.parquet.schema.Types$BaseListBuilder',
    'org.apache.parquet.schema.Types$GroupBuilder',
    'org.apache.parquet.schema.Types$ListBuilder',
    'org.apache.parquet.schema.Types$PrimitiveBuilder'
  )
  ignoreViolations(
    // Guava internal classes
    'com.google.common.cache.Striped64',
    'com.google.common.cache.Striped64$1',
    'com.google.common.cache.Striped64$Cell',
    'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray',
    'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$1',
    'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$2',
    'com.google.common.hash.Striped64',
    'com.google.common.hash.Striped64$1',
    'com.google.common.hash.Striped64$Cell',
    'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator',
    'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1',
    'com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper',
    'com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1',

    // Arrow memory classes
    'org.apache.arrow.memory.ArrowBuf',
    'org.apache.arrow.memory.util.ByteFunctionHelpers',
    'org.apache.arrow.memory.util.MemoryUtil',
    'org.apache.arrow.memory.util.MemoryUtil$1',
    'org.apache.arrow.memory.util.hash.MurmurHasher',
    'org.apache.arrow.memory.util.hash.SimpleHasher'

  )
}
